# This is a basic workflow to help you get started with Actions

name: SFDX Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job deploys and tests functionality to Salesforce
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Sets up Salesforce CLI for this action
      - name: Salesforce SFDX CLI Action
        uses: sfdx-actions/setup-sfdx@v1
        with:
          # Authorize a Salesforce org using an SFDX auth URL
          sfdx-auth-url: ${{ secrets.DEVHUB_URL }}

      # Sets the default devhub org for us to create scratch orgs and packages against
      - name: Set Default DevHub
        run: sfdx force:config:set defaultdevhubusername=xzlkcz@brave-fox-22iq2.com

      #Creates a scratch org to test our code
      - name: Create Scratch Org
        run: sfdx force:org:create -a actionsBuild -d 1 -f config/project-scratch-def.json -s

      #Pushes all configurations to scratch org
      - name: Pushing source
        run: sfdx force:source:push -f

      #Run all Apex tests in our scratch org
      - name: Running Apex Tests
        run: sfdx force:apex:test:run -l RunLocalTests -w 30

      #Delete scratch org after successful build
      - name: Deleting Scratch Org
        run: sfdx force:org:delete -p

  # This job releases a new package version
  #release:
  #needs: build
  # The type of runner that the job will run on
  #runs-on: ubuntu-latest

  #steps:
  # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #  - uses: actions/checkout@v2

  # Sets up Salesforce CLI for this action
  #  - name: Salesforce SFDX CLI Action
  #    uses: sfdx-actions/setup-sfdx@v1
  #    with:
  # Authorize a Salesforce org using an SFDX auth URL
  #    sfdx-auth-url: ${{ secrets.DEVHUB_URL }}

  #Sets the default devhub org for us to create scratch orgs and packages against
  # - name: Set Default DevHub
  #  run: sfdx force:config:set defaultdevhubusername=anthony.wheeler@sfdx.course.com

  # Generates new Package Version Number based on the last released version of the package
  # - name: Creating Package Version
  #  run: |
  #    PACKAGE_VERSION_JSON="$(eval sfdx force:package:version:list --concise --released --packages FirstCoursePackage --json | jq '.result | sort_by(-.MajorVersion, -.MinorVersion, -.PatchVersion, -.BuildNumber) | .[0] // ""')"
  #    echo $PACKAGE_VERSION_JSON
  #    IS_RELEASED=$(jq -r '.IsReleased?' <<< $PACKAGE_VERSION_JSON)
  #    MAJOR_VERSION=$(jq -r '.MajorVersion?' <<< $PACKAGE_VERSION_JSON)
  #    MINOR_VERSION=$(jq -r '.MinorVersion?' <<< $PACKAGE_VERSION_JSON)
  #    PATCH_VERSION=$(jq -r '.PatchVersion?' <<< $PACKAGE_VERSION_JSON)
  #    BUILD_VERSION="NEXT"
  #    if [ -z $MAJOR_VERSION ]; then MAJOR_VERSION=1; fi;
  #    if [ -z $MINOR_VERSION ]; then MINOR_VERSION=0; fi;
  #    if [ -z $PATCH_VERSION ]; then PATCH_VERSION=0; fi;
  #    if [ "$IS_RELEASED" == "true" ]; then MINOR_VERSION=$(($MINOR_VERSION+1)); fi;
  #    VERSION_NUMBER="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION.$BUILD_VERSION"
  #    echo $VERSION_NUMBER
  #    PACKAGE_VERSION_ID="$(eval sfdx force:package:version:create --package FirstCoursePackage --versionnumber $VERSION_NUMBER --installationkeybypass --wait 30 --json | jq -r '.result.SubscriberPackageVersionId')"
  #    echo $PACKAGE_VERSION_ID
